name: dynamic matrix

on: 
    workflow_dispatch:
        inputs:
            node-version:
                type: string
                description: node-version
                default: "14,15,16"
                required: true
            os:
                type: string
                description: Operation System
                default: "windows-latest,ubuntu-latest"
                required: true



jobs:
    # this job is to transform from the inputs in workflow dispatch from strings to array that are being sent in matrix "windows-latest,ubuntu-latest" to [windows-latest,ubuntu-latest]
    prepare-matrix:
        outputs:
            matrix-arrays: ${{steps.matrix-arrays.outputs.result}}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/github-script@v6
              id: matrix-arrays
              with:
                script: "return {os: context.payload.inputs['os'].split(',') ,'node-version': context.payload.inputs['node-version'].split(',')}" 
                # this a java script function and we used in action and when returning it will set them in GITHUB_OUTPUT
                result-encoding: json # cause were returning here a jso object    
            - run: echo "step-output=value 1" >> $GITHUB_OUTPUT # we're setting value into this nev variable output
              id: step-1
            - run: echo "step-output=value 2" >> $GITHUB_OUTPUT # we're setting value into this nev variable output
              id: step-2
            - run: |
                echo '${{steps.step-1.outputs.step-output}}'
                echo '${{steps.step-2.outputs.step-output}}'
            - run: echo ${{fromJson(steps.matrix-arrays.outputs.result).os}}
    display-node-matrix:
        needs: prepare-matrix
        strategy:
            matrix: 
                node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix-arrays).os }}
                os: ${{ fromJson(needs.prepare-matrix.outputs.matrix-arrays).node-version }}

        runs-on: ${{ matrix.os }}
        steps:
            - run: node -v
            - uses: actions/setup-node@v3
              with:
                node-version: ${{matrix.node-version}}
            - run: node -v
